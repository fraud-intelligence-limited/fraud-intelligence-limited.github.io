import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.c4d6cd72.js";const b=JSON.parse('{"title":"Signing transactions","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials-api/signing-transactions.md","filePath":"tutorials-api/signing-transactions.md"}'),l={name:"tutorials-api/signing-transactions.md"},o=p(`<h1 id="signing-transactions" tabindex="-1">Signing transactions <a class="header-anchor" href="#signing-transactions" aria-label="Permalink to &quot;Signing transactions&quot;">​</a></h1><p>Every operation that contains <code>.../assemble</code> in its path and has a mirroring endpoint (e.g., <a href="./../api-specification/contribution-controller/assembling-a-contribution.html">assembling a contribution</a> -&gt; <a href="./../api-specification/contribution-controller/submitting-a-contribution.html">submitting a contribution</a>) requires its transaction to be represented as a <code>transactionHex</code> string retrieved from the first request to be signed as a Hex before it is used for the second one.</p><p>For reference, see any of the following tutorials:</p><ul><li><a href="./submitting-a-contribution.html">Submitting a contribution</a></li><li><a href="./flagging-a-contribution.html">Flagging a contribution</a></li></ul><p>The exact implementation to your system may vary depending on the specific SDK or programming language being used. However, the overall sequence of events to sign a transaction should be the following:</p><ol><li>Create a <code>keyPair</code> object from the public and private keys of the user&#39;s <a href="./../overview/web-interface.html#blockchain-key-pair"><strong>Blockchain</strong> key pair</a>.</li><li>Retrieve the Hex string of the required transaction.</li><li>Decode the retrieved transaction Hex string.</li><li>Sign the decoded transaction.</li><li>Re-encode the signed transaction to Hex format.</li></ol><p>The resulting encoded transaction Hex string can be used as the body for requests to the following endpoints:</p><div class="language-http vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">POST</span><span style="color:#E1E4E8;"> /api/v1/contribution-management/contribution</span></span>
<span class="line"><span style="color:#F97583;">PATCH</span><span style="color:#E1E4E8;"> /api/v1/contribution-management/contribution/flag</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">POST</span><span style="color:#24292E;"> /api/v1/contribution-management/contribution</span></span>
<span class="line"><span style="color:#D73A49;">PATCH</span><span style="color:#24292E;"> /api/v1/contribution-management/contribution/flag</span></span></code></pre></div><h2 id="iroha-sdk-references" tabindex="-1">Iroha SDK references <a class="header-anchor" href="#iroha-sdk-references" aria-label="Permalink to &quot;Iroha SDK references&quot;">​</a></h2><p>You can use <a href="./../#what-is-iroha-2">any Iroha SDK available</a> to sign a transaction. Below are references on how to sign a transaction using the following Iroha SDKs:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-3ujU0" id="tab-4pbIjIt" checked="checked"><label for="tab-4pbIjIt">Iroha Java/Kotlin SDK</label><input type="radio" name="group-3ujU0" id="tab-OQecRAP"><label for="tab-OQecRAP">Iroha JavaScript SDK</label><input type="radio" name="group-3ujU0" id="tab-L9JomOY"><label for="tab-L9JomOY">Iroha Python SDK</label></div><div class="blocks"><div class="language-kotlin vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Your package value:</span></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">something</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Import dependencies:</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.appendSignatures</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generated.datamodel.transaction.SignedTransaction</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.keyPairFromHex</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">net.i2p.crypto.eddsa.spec.EdDSANamedCurveTable</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">org.bouncycastle.util.encoders.Hex</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">java.io.File</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Example transaction Hex string:</span></span>
<span class="line"><span style="color:#6A737D;">// transactionHex = &quot;0114616c69636528776f6e6465726c616e640004000d09001468656c6c6f00002cde318c87010000a0860100000000000000041c65643235353139807233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c00101bef276fc36ba638abd422e76fd0e6df319df1c3d336ab60d7276333b4010bb7d962d04b273d9caf91cb8509581c0b55e1cdee371c52863a8b4b62c67fbfc870f&quot;</span></span>
<span class="line"><span style="color:#F97583;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">decodeSignEncode</span><span style="color:#E1E4E8;">(transactionHex: </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">): </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Example ed25519 public key:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> publicKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;7fbedb314a9b0c00caef967ac5cabb982ec45da828a0c58a9aafc854f32422ac&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Example ed25519 private key:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Note: In Kotlin/Java SDK the truncated representation is more common, although you can refer to full ones represented as concatenation of private and public ones in other SDKs</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> privateKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;413b285d1819a6166b0daa762bb6bef2d082cffb9a13ce041cb0fda5e2f06dc3&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Obtain &#39;keyPair&#39; from the public and private keys of the &#39;Blockchain&#39; key pair:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> keyPair </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">keyPairFromHex</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        publicKey,</span></span>
<span class="line"><span style="color:#E1E4E8;">        privateKey,</span></span>
<span class="line"><span style="color:#E1E4E8;">        EdDSANamedCurveTable.</span><span style="color:#B392F0;">getByName</span><span style="color:#E1E4E8;">(EdDSANamedCurveTable.ED_25519)</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Decode the transaction:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> transaction: </span><span style="color:#B392F0;">ByteArray</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Hex.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(transactionHex)</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e: </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Could not decode transaction from hex format: </span><span style="color:#79B8FF;">$e</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> e</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> decodedTransaction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> transaction.</span><span style="color:#B392F0;">let</span><span style="color:#E1E4E8;"> { SignedTransaction.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(it) }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Sign the transaction:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> signedTransaction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> decodedTransaction.</span><span style="color:#B392F0;">appendSignatures</span><span style="color:#E1E4E8;">(keyPair)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Re-encode the transaction:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> encoded </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> signedTransaction.</span><span style="color:#B392F0;">let</span><span style="color:#E1E4E8;"> { SignedTransaction.</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(it) }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> encodedHex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Hex.</span><span style="color:#B392F0;">toHexString</span><span style="color:#E1E4E8;">(encoded)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Use the value wherever needed further:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Signed transaction (Hex): </span><span style="color:#79B8FF;">$encodedHex</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> encodedHex</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Your package value:</span></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">something</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Import dependencies:</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.appendSignatures</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generated.datamodel.transaction.SignedTransaction</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.keyPairFromHex</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">net.i2p.crypto.eddsa.spec.EdDSANamedCurveTable</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">org.bouncycastle.util.encoders.Hex</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">java.io.File</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Example transaction Hex string:</span></span>
<span class="line"><span style="color:#6A737D;">// transactionHex = &quot;0114616c69636528776f6e6465726c616e640004000d09001468656c6c6f00002cde318c87010000a0860100000000000000041c65643235353139807233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c00101bef276fc36ba638abd422e76fd0e6df319df1c3d336ab60d7276333b4010bb7d962d04b273d9caf91cb8509581c0b55e1cdee371c52863a8b4b62c67fbfc870f&quot;</span></span>
<span class="line"><span style="color:#D73A49;">fun</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decodeSignEncode</span><span style="color:#24292E;">(transactionHex: </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">): </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Example ed25519 public key:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> publicKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;7fbedb314a9b0c00caef967ac5cabb982ec45da828a0c58a9aafc854f32422ac&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Example ed25519 private key:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Note: In Kotlin/Java SDK the truncated representation is more common, although you can refer to full ones represented as concatenation of private and public ones in other SDKs</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> privateKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;413b285d1819a6166b0daa762bb6bef2d082cffb9a13ce041cb0fda5e2f06dc3&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Obtain &#39;keyPair&#39; from the public and private keys of the &#39;Blockchain&#39; key pair:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> keyPair </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">keyPairFromHex</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        publicKey,</span></span>
<span class="line"><span style="color:#24292E;">        privateKey,</span></span>
<span class="line"><span style="color:#24292E;">        EdDSANamedCurveTable.</span><span style="color:#6F42C1;">getByName</span><span style="color:#24292E;">(EdDSANamedCurveTable.ED_25519)</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Decode the transaction:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> transaction: </span><span style="color:#6F42C1;">ByteArray</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        Hex.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(transactionHex)</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e: </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Could not decode transaction from hex format: </span><span style="color:#005CC5;">$e</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> e</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> decodedTransaction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transaction.</span><span style="color:#6F42C1;">let</span><span style="color:#24292E;"> { SignedTransaction.</span><span style="color:#6F42C1;">decode</span><span style="color:#24292E;">(it) }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Sign the transaction:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> signedTransaction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> decodedTransaction.</span><span style="color:#6F42C1;">appendSignatures</span><span style="color:#24292E;">(keyPair)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Re-encode the transaction:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> encoded </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> signedTransaction.</span><span style="color:#6F42C1;">let</span><span style="color:#24292E;"> { SignedTransaction.</span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(it) }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> encodedHex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Hex.</span><span style="color:#6F42C1;">toHexString</span><span style="color:#24292E;">(encoded)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Use the value wherever needed further:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Signed transaction (Hex): </span><span style="color:#005CC5;">$encodedHex</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> encodedHex</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// @ts-check</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { crypto } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@iroha2/crypto-target-node&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// version: 1.1.1</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { datamodel } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@iroha2/data-model&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// version: 7.0.0</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { signTransaction, setCrypto, Signer } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@iroha2/client&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// version: 7.0.0</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { freeScope } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@iroha2/crypto-core&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// version: 1.1.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setCrypto</span><span style="color:#E1E4E8;">(crypto)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Uint8Array}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">bytes</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bytesToHex</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">bytes</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(bytes, (</span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> v.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">padStart</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">hex</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{Uint8Array}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hexToBytes</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">hex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/** </span><span style="color:#F97583;">@type</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number[]}</span><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bytes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> hex.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    bytes.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">parseInt</span><span style="color:#E1E4E8;">(hex.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(i, i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Uint8Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(bytes)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{datamodel.SignedTransactionV1}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">tx</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{import(&#39;@iroha2/crypto-core&#39;).KeyPair}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">keyPair</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{datamodel.SignedTransactionV1}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">appendSignatureWithKeyPair</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">tx</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">keyPair</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">signer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Signer</span><span style="color:#E1E4E8;">(tx.payload.authority, keyPair)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">signature</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">signTransaction</span><span style="color:#E1E4E8;">(tx.payload, signer)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> datamodel.</span><span style="color:#B392F0;">SignedTransactionV1</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    payload: tx.payload,</span></span>
<span class="line"><span style="color:#E1E4E8;">    signatures: datamodel.</span><span style="color:#B392F0;">SortedVecSignature</span><span style="color:#E1E4E8;">([</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">tx.signatures, signature])</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">publicKeyHex</span><span style="color:#6A737D;"> - ed25519 pub key hex</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">privateKeyHex</span><span style="color:#6A737D;"> - ed25519 private key hex</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">transaction</span><span style="color:#6A737D;"> - hex of the transaction</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{string}</span><span style="color:#6A737D;"> - hex of the transaction with the appended signature</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">appendSignature</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">publicKeyHex</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">privateKeyHex</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">transaction</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">freeScope</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">keyPair</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> crypto.KeyPair.</span><span style="color:#B392F0;">fromJSON</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      public_key:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// magic ed25519 multihash prefix</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;ed0120&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> publicKeyHex,</span></span>
<span class="line"><span style="color:#E1E4E8;">      private_key: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        digest_function: </span><span style="color:#9ECBFF;">&#39;ed25519&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        payload: privateKeyHex</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">txDecoded</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> datamodel.SignedTransaction.</span><span style="color:#B392F0;">fromBuffer</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">hexToBytes</span><span style="color:#E1E4E8;">(transaction)</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">txNew</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> datamodel.</span><span style="color:#B392F0;">SignedTransaction</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;V1&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">appendSignatureWithKeyPair</span><span style="color:#E1E4E8;">(txDecoded.enum.</span><span style="color:#B392F0;">as</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;V1&#39;</span><span style="color:#E1E4E8;">), keyPair)</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bytesToHex</span><span style="color:#E1E4E8;">(datamodel.SignedTransaction.</span><span style="color:#B392F0;">toBuffer</span><span style="color:#E1E4E8;">(txNew))</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// example transaction</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tx</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">appendSignature</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;7fbedb314a9b0c00caef967ac5cabb982ec45da828a0c58a9aafc854f32422ac&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;413b285d1819a6166b0daa762bb6bef2d082cffb9a13ce041cb0fda5e2f06dc37fbedb314a9b0c00caef967ac5cabb982ec45da828a0c58a9aafc854f32422ac&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;0114616c69636528776f6e6465726c616e640004000d09001468656c6c6f00002cde318c87010000a0860100000000000000041c65643235353139807233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c00101bef276fc36ba638abd422e76fd0e6df319df1c3d336ab60d7276333b4010bb7d962d04b273d9caf91cb8509581c0b55e1cdee371c52863a8b4b62c67fbfc870f&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(tx)</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; 0114616c69636528776f6e6465726c616e640004000d09001468656c6c6f00002cde318c87010000a0860100000000000000081c65643235353139807233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c00101bef276fc36ba638abd422e76fd0e6df319df1c3d336ab60d7276333b4010bb7d962d04b273d9caf91cb8509581c0b55e1cdee371c52863a8b4b62c67fbfc870f1c65643235353139807fbedb314a9b0c00caef967ac5cabb982ec45da828a0c58a9aafc854f32422ac01014a3cffcfb6276cc6de039c3ab287e7614e6dffc5e152200efa817d59c04334839c9624781bb1bda7b1d5ead0f0ea1c31238cccf9a948becf71d09728c4914d0d</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @ts-check</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { crypto } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@iroha2/crypto-target-node&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// version: 1.1.1</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { datamodel } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@iroha2/data-model&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// version: 7.0.0</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { signTransaction, setCrypto, Signer } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@iroha2/client&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// version: 7.0.0</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { freeScope } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@iroha2/crypto-core&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// version: 1.1.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">setCrypto</span><span style="color:#24292E;">(crypto)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{Uint8Array}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">bytes</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bytesToHex</span><span style="color:#24292E;">(</span><span style="color:#E36209;">bytes</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(bytes, (</span><span style="color:#E36209;">v</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> v.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">padStart</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">hex</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{Uint8Array}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hexToBytes</span><span style="color:#24292E;">(</span><span style="color:#E36209;">hex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/** </span><span style="color:#D73A49;">@type</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number[]}</span><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bytes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> hex.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    bytes.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">parseInt</span><span style="color:#24292E;">(hex.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(i, i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">16</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Uint8Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(bytes)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{datamodel.SignedTransactionV1}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">tx</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{import(&#39;@iroha2/crypto-core&#39;).KeyPair}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">keyPair</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{datamodel.SignedTransactionV1}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">appendSignatureWithKeyPair</span><span style="color:#24292E;">(</span><span style="color:#E36209;">tx</span><span style="color:#24292E;">, </span><span style="color:#E36209;">keyPair</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">signer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Signer</span><span style="color:#24292E;">(tx.payload.authority, keyPair)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">signature</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">signTransaction</span><span style="color:#24292E;">(tx.payload, signer)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> datamodel.</span><span style="color:#6F42C1;">SignedTransactionV1</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    payload: tx.payload,</span></span>
<span class="line"><span style="color:#24292E;">    signatures: datamodel.</span><span style="color:#6F42C1;">SortedVecSignature</span><span style="color:#24292E;">([</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">tx.signatures, signature])</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">publicKeyHex</span><span style="color:#6A737D;"> - ed25519 pub key hex</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">privateKeyHex</span><span style="color:#6A737D;"> - ed25519 private key hex</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">transaction</span><span style="color:#6A737D;"> - hex of the transaction</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@returns</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{string}</span><span style="color:#6A737D;"> - hex of the transaction with the appended signature</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">appendSignature</span><span style="color:#24292E;">(</span><span style="color:#E36209;">publicKeyHex</span><span style="color:#24292E;">, </span><span style="color:#E36209;">privateKeyHex</span><span style="color:#24292E;">, </span><span style="color:#E36209;">transaction</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">freeScope</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">keyPair</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> crypto.KeyPair.</span><span style="color:#6F42C1;">fromJSON</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      public_key:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// magic ed25519 multihash prefix</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;ed0120&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> publicKeyHex,</span></span>
<span class="line"><span style="color:#24292E;">      private_key: {</span></span>
<span class="line"><span style="color:#24292E;">        digest_function: </span><span style="color:#032F62;">&#39;ed25519&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        payload: privateKeyHex</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">txDecoded</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> datamodel.SignedTransaction.</span><span style="color:#6F42C1;">fromBuffer</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">hexToBytes</span><span style="color:#24292E;">(transaction)</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">txNew</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> datamodel.</span><span style="color:#6F42C1;">SignedTransaction</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;V1&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">appendSignatureWithKeyPair</span><span style="color:#24292E;">(txDecoded.enum.</span><span style="color:#6F42C1;">as</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;V1&#39;</span><span style="color:#24292E;">), keyPair)</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bytesToHex</span><span style="color:#24292E;">(datamodel.SignedTransaction.</span><span style="color:#6F42C1;">toBuffer</span><span style="color:#24292E;">(txNew))</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// example transaction</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">tx</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">appendSignature</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;7fbedb314a9b0c00caef967ac5cabb982ec45da828a0c58a9aafc854f32422ac&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;413b285d1819a6166b0daa762bb6bef2d082cffb9a13ce041cb0fda5e2f06dc37fbedb314a9b0c00caef967ac5cabb982ec45da828a0c58a9aafc854f32422ac&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&#39;0114616c69636528776f6e6465726c616e640004000d09001468656c6c6f00002cde318c87010000a0860100000000000000041c65643235353139807233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c00101bef276fc36ba638abd422e76fd0e6df319df1c3d336ab60d7276333b4010bb7d962d04b273d9caf91cb8509581c0b55e1cdee371c52863a8b4b62c67fbfc870f&#39;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(tx)</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; 0114616c69636528776f6e6465726c616e640004000d09001468656c6c6f00002cde318c87010000a0860100000000000000081c65643235353139807233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c00101bef276fc36ba638abd422e76fd0e6df319df1c3d336ab60d7276333b4010bb7d962d04b273d9caf91cb8509581c0b55e1cdee371c52863a8b4b62c67fbfc870f1c65643235353139807fbedb314a9b0c00caef967ac5cabb982ec45da828a0c58a9aafc854f32422ac01014a3cffcfb6276cc6de039c3ab287e7614e6dffc5e152200efa817d59c04334839c9624781bb1bda7b1d5ead0f0ea1c31238cccf9a948becf71d09728c4914d0d</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># Import dependency</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> iroha</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Example signed transaction, encoded with SCALE codec and represented as hex string:</span></span>
<span class="line"><span style="color:#E1E4E8;">encoded_transaction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;010400807233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c00101b65301ad504ea1430c171379ed45226bfc5fe770a216815654e20491626bbf857247bee73f6790314f892ed1a3e4c18cc6815ce9ff85ce956e0f9ab46605bc093962fb8f8e01000028776f6e6465726c616e6414616c6963650008000d09020c786f7228776f6e6465726c616e6401000000020d1402000000000000000002000000000000000d08030c786f7228776f6e6465726c616e6428776f6e6465726c616e6414616c69636501a0860100000000000000&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Example ed25519 key pair</span></span>
<span class="line"><span style="color:#E1E4E8;">key_pair </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> iroha.KeyPair.from_json(</span><span style="color:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">{</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;public_key&quot;: &quot;ed0120BA85186D0F8C995F8DEA6C95B3EDA321C88C983D4F6B28E079CC121B40AA8E00&quot;,</span></span>
<span class="line"><span style="color:#9ECBFF;">  &quot;private_key&quot;: {</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;digest_function&quot;: &quot;ed25519&quot;,</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;payload&quot;: &quot;1b9068cd9b4acaabf1e8c66c622d9bd15ff3b04099819b750e3987be73d2096fba85186d0f8c995f8dea6c95b3eda321c88c983d4f6b28e079cc121b40aa8e00&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">  }</span></span>
<span class="line"><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;&quot;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Decode the transaction:</span></span>
<span class="line"><span style="color:#E1E4E8;">transaction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> iroha.SignedTransaction.decode_hex(encoded_transaction)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Sign the transaction with the provided private key:</span></span>
<span class="line"><span style="color:#E1E4E8;">transaction.append_signature(key_pair)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Re-encode the transaction:</span></span>
<span class="line"><span style="color:#E1E4E8;">re_encoded_transaction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> transaction.encode_hex()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Retrieve the encoded Hex string of the transaction:</span></span>
<span class="line"><span style="color:#79B8FF;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">f</span><span style="color:#9ECBFF;">&quot;Signed and encoded transaction:</span><span style="color:#79B8FF;">\\n{</span><span style="color:#E1E4E8;">re_encoded_transaction</span><span style="color:#79B8FF;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># Import dependency</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> iroha</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Example signed transaction, encoded with SCALE codec and represented as hex string:</span></span>
<span class="line"><span style="color:#24292E;">encoded_transaction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;010400807233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c00101b65301ad504ea1430c171379ed45226bfc5fe770a216815654e20491626bbf857247bee73f6790314f892ed1a3e4c18cc6815ce9ff85ce956e0f9ab46605bc093962fb8f8e01000028776f6e6465726c616e6414616c6963650008000d09020c786f7228776f6e6465726c616e6401000000020d1402000000000000000002000000000000000d08030c786f7228776f6e6465726c616e6428776f6e6465726c616e6414616c69636501a0860100000000000000&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Example ed25519 key pair</span></span>
<span class="line"><span style="color:#24292E;">key_pair </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> iroha.KeyPair.from_json(</span><span style="color:#032F62;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#032F62;">{</span></span>
<span class="line"><span style="color:#032F62;">  &quot;public_key&quot;: &quot;ed0120BA85186D0F8C995F8DEA6C95B3EDA321C88C983D4F6B28E079CC121B40AA8E00&quot;,</span></span>
<span class="line"><span style="color:#032F62;">  &quot;private_key&quot;: {</span></span>
<span class="line"><span style="color:#032F62;">    &quot;digest_function&quot;: &quot;ed25519&quot;,</span></span>
<span class="line"><span style="color:#032F62;">    &quot;payload&quot;: &quot;1b9068cd9b4acaabf1e8c66c622d9bd15ff3b04099819b750e3987be73d2096fba85186d0f8c995f8dea6c95b3eda321c88c983d4f6b28e079cc121b40aa8e00&quot;</span></span>
<span class="line"><span style="color:#032F62;">  }</span></span>
<span class="line"><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">&quot;&quot;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Decode the transaction:</span></span>
<span class="line"><span style="color:#24292E;">transaction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> iroha.SignedTransaction.decode_hex(encoded_transaction)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Sign the transaction with the provided private key:</span></span>
<span class="line"><span style="color:#24292E;">transaction.append_signature(key_pair)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Re-encode the transaction:</span></span>
<span class="line"><span style="color:#24292E;">re_encoded_transaction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transaction.encode_hex()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Retrieve the encoded Hex string of the transaction:</span></span>
<span class="line"><span style="color:#005CC5;">print</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">f</span><span style="color:#032F62;">&quot;Signed and encoded transaction:</span><span style="color:#005CC5;">\\n{</span><span style="color:#24292E;">re_encoded_transaction</span><span style="color:#005CC5;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div></div></div>`,11),e=[o];function c(t,r,y,E,i,d){return n(),a("div",null,e)}const f=s(l,[["render",c]]);export{b as __pageData,f as default};
